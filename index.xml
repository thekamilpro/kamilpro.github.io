<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Kamil Pro</title><link>https://kamilpro.github.io/</link><description>Sysadmin's point of view</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Kamil Procyszyn</copyright><lastBuildDate>Mon, 07 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kamilpro.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>PowerShell Parameter Attributes - validate, group, require params and add pipeline to your function</title><link>https://kamilpro.github.io/powershell-parameter/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-parameter/</guid><description>Having properly configured parameters help your users to understand the use of your function. It also helps fellow developers to appreciate the intended use of the function. In addition, it gives you more control of how the code flows through your script.
Parameter attributes is what takes parameters to the next level - you can specify that certain parameters are mandatory, group them together so that only certain combination of parameters is meant to work together, we can even add pipeline support so that function can be used as any other built-in function.</description></item><item><title>PowerShell function - converting script into function with parameters</title><link>https://kamilpro.github.io/powershell-function/</link><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-function/</guid><description><![CDATA[So you&rsquo;ve been writing your scripts for some time and wondering how to make them more PowerShell-like, so that they can be invoked from the console like all the other cmdlets?
In this quick video I&rsquo;ll show you how to convert a sample script into function, add parameters and indicated to your user how to use your function with mandatory parameters and types.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Sample script which asks user for basic information, then manipulates it and # display some information # There&#39;s no way (at least easy) to pass these parameters from prompt, nor validate $Name = Read-Host -Prompt &#34;What&#39;s your name?]]></description></item><item><title>PowerShell PSCustomObject - Custom Object, the way it was meant to be</title><link>https://kamilpro.github.io/powershell-pscustomobject/</link><pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-pscustomobject/</guid><description>Everything is an object in PowerShell, and ability to create own object allows for one more way of controlling and handling data.
In this video I&amp;rsquo;ll take you through the steps of creating PSCustomObject, working with its properties to doing more advanced topics - like adding methods and types to the object.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 &amp;lt;#PSScriptInfo .</description></item><item><title>PowerShell Hash Table - Storing key value pairs</title><link>https://kamilpro.github.io/powershell-hash-table/</link><pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-hash-table/</guid><description>Quick crash course into using hash tables in PowerShell.
amp;lt;#PSScriptInfo .</description></item><item><title>PowerShell Array and ArrayList - storing multiple items as a one variable</title><link>https://kamilpro.github.io/powershell-array-and-arraylist/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-array-and-arraylist/</guid><description>Array is a basic data structure that allows to store multiple items in one variable. In this short video, I&amp;rsquo;ll show you how to create a basic array, populate it with items, how to add, access and modify items within array.
In addition, I&amp;rsquo;ll present to you how to use ArrayList - which is much more flexible array, especially for adding more items.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 # Link to the video: https://youtu.</description></item><item><title>PowerShell Switch Statement - Different take on branching</title><link>https://kamilpro.github.io/powershell-switch-statement/</link><pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-switch-statement/</guid><description>One switch statement can replace multiple if/else statements, it makes code more readable and is really easy to use - there&amp;rsquo;s no reason why you shouldn&amp;rsquo;t give it a try!
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 # Link to the video: https://youtu.</description></item><item><title>PowerShell For loop</title><link>https://kamilpro.github.io/powershell-for-loop/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-for-loop/</guid><description>For loop - do you actually need it, since there&amp;rsquo;s foreach loop? Turns out, yes - there are situations where for loop comes very handy.
In this video I&amp;rsquo;ll show you the basic syntax of the for loop, going through nested for loops to end up with real case scenario from Azure Application Insights.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 # Link to the video: https://youtu.</description></item><item><title>PowerShell If statement - controlling the flow of your code</title><link>https://kamilpro.github.io/powershell-if-statement/</link><pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-if-statement/</guid><description>In this video we are exploring how to use If statement in various scenarios. If statement allows you to take tide control over the execution of your code, by dictating your script what to do in a given situation.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 # Link to the video: https://youtu.</description></item><item><title>Managing Software with Chocolatey - Automate installation and updates of your applications</title><link>https://kamilpro.github.io/managing-software-with-chocolatey/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/managing-software-with-chocolatey/</guid><description>Software management is not trivial task. Preparing for silent deployment is challenging, and even if you manage to install the application, how to keep it up to date?
Chocolatey is package manager for Windows, that can fully automate lifecycle of your software.
In this video, I&amp;rsquo;ll show you how to install Chocolatey, then how to find software, install it and finally keeping it up to date - all coming with free open-source license.</description></item><item><title>PowerShell for IT Professionals [#20] â€“ Next Steps with PowerShell</title><link>https://kamilpro.github.io/powershell-for-it-professionals-20-next-steps-with-powershell/</link><pubDate>Thu, 26 Nov 2020 17:46:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-for-it-professionals-20-next-steps-with-powershell/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2020/11/Slide1-2.jpg" referrerpolicy="no-referrer">
&lt;/div>Congratulations! This is 20th and last lesson in the course â€“ and my aim here is to show you various paths you can take your PowerShell journey to.
Iâ€™m going to show what else you can do within PowerShell itself, as well how to keep up-to-day plus â€“ what other doors writing code has opened for you â€“ Iâ€™d love to hear back about this!
I hope youâ€™ve enjoyed the course so far and it will be helped you in some way â€“ either solve a problem, got promotion, or simply learnt something new.</description></item></channel></rss>