<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>wmi on Kamil Pro</title><link>https://kamilpro.github.io/tags/wmi/</link><description>Recent content in wmi on Kamil Pro</description><image><title>Kamil Pro</title><url>https://kamilpro.github.io/logo.png</url><link>https://kamilpro.github.io/logo.png</link></image><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Kamil Procyszyn</copyright><lastBuildDate>Sat, 05 Sep 2020 16:27:10 +0000</lastBuildDate><atom:link href="https://kamilpro.github.io/tags/wmi/index.xml" rel="self" type="application/rss+xml"/><item><title>PowerShell for IT Professionals [#12] – WMI – Windows Management Instrumentation</title><link>https://kamilpro.github.io/powershell-for-it-professionals-12-wmi-windows-management-instrumentation/</link><pubDate>Sat, 05 Sep 2020 16:27:10 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-12-wmi-windows-management-instrumentation/</guid><description>In this lesson we learn how to use PowerShell to access WMI (Windows Management Instrumentation), so that we can gain often hidden or obscure information.
We will then use WMI Explorer graphical tool to ease discovering all possible classes and instances that WMI provides.
Finally, we will use WMI queries to add another level of granularity in GPO so that we can target very specific computers in it.
Exercises There’s a WMI class that lists all the installed software – find it and list all currently installed software with PowerShell.</description></item></channel></rss>