<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>invoke on Kamil Pro</title><link>https://kamilpro.github.io/tags/invoke/</link><description>Recent content in invoke on Kamil Pro</description><image><title>Kamil Pro</title><url>https://kamilpro.github.io/logo.png</url><link>https://kamilpro.github.io/logo.png</link></image><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Kamil Procyszyn</copyright><lastBuildDate>Sun, 15 Nov 2020 20:57:20 +0000</lastBuildDate><atom:link href="https://kamilpro.github.io/tags/invoke/index.xml" rel="self" type="application/rss+xml"/><item><title>PowerShell for IT Professionals [#19] – Websites and APIs</title><link>https://kamilpro.github.io/powershell-for-it-professionals-19-websites-and-apis/</link><pubDate>Sun, 15 Nov 2020 20:57:20 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-19-websites-and-apis/</guid><description>PowerShell is a great server automation tool, but what about Internet and any other web served services?
As it turns out, PowerShell is great in scrapping websites and consuming APIs – and it’s been one of the main development areas of the tool in the last couple of years.
In this lesson we are going to see how to use PowerShell to download files, scrap websites, discover links.
We will then use an API of PasswordPusher (pwpush.</description></item><item><title>PowerShell for IT Professionals [#17] – Scripting part 4 – parameters, running remotely and formatting</title><link>https://kamilpro.github.io/powershell-for-it-professionals-17-scripting-part-4-parameters-running-remotely-and-formatting/</link><pubDate>Mon, 19 Oct 2020 18:32:20 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-17-scripting-part-4-parameters-running-remotely-and-formatting/</guid><description>In the last part of scripting series, we will make the script to be able to query remote machines, e.g. servers.
We will also check how to add parameters to the script (and configure the default value of parameter) so that user will able to pass the parameter name like in a standard PowerShell cmdlet.
Finally, we are going to format the script so that it looks more reliable and make some refactoring so that the logic is simpler.</description></item><item><title>PowerShell for IT Professionals [#10] – Remote management with PowerShell</title><link>https://kamilpro.github.io/powershell-for-it-professionals-10-remote-management-with-powershell/</link><pubDate>Mon, 24 Aug 2020 10:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-10-remote-management-with-powershell/</guid><description>In this lesson we’re going to learn how to do one-to-one and one-to-many remote management with PowerShell. There’s no need for telnet, ssh or psexec as PowerShell has its own protocol that’s built in right into Windows. We will look at how to create interactive sessions and send commands to multiple servers at once.
Exercises With Enter-PSSesion, Remote to remote server and&amp;nbsp; restart &amp;#8220;Windows update&amp;#8221; service With Invoke-Command find out the remote computers last boot up/startup time List all running processes on remote server without using Enter-PsSession or Invoke-Command If you have a Domain Controller available, use Invoke-Command to list all computers on that network (you can use * for filter), remember that you need to provide all necessary parameters with your command in the script block so command just runs and doesn&amp;#8217;t prompt for any additional information.</description></item></channel></rss>