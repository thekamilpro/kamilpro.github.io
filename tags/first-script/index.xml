<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>first script on Kamil Pro</title><link>https://kamilpro.com/tags/first-script/</link><description>Recent content in first script on Kamil Pro</description><image><title>Kamil Pro</title><url>https://kamilpro.com/logo.png</url><link>https://kamilpro.com/logo.png</link></image><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Kamil Procyszyn</copyright><lastBuildDate>Mon, 19 Oct 2020 18:32:20 +0000</lastBuildDate><atom:link href="https://kamilpro.com/tags/first-script/index.xml" rel="self" type="application/rss+xml"/><item><title>PowerShell for IT Professionals [#17] – Scripting part 4 – parameters, running remotely and formatting</title><link>https://kamilpro.com/powershell-for-it-professionals-17-scripting-part-4-parameters-running-remotely-and-formatting/</link><pubDate>Mon, 19 Oct 2020 18:32:20 +0000</pubDate><guid>https://kamilpro.com/powershell-for-it-professionals-17-scripting-part-4-parameters-running-remotely-and-formatting/</guid><description>In the last part of scripting series, we will make the script to be able to query remote machines, e.g. servers.
We will also check how to add parameters to the script (and configure the default value of parameter) so that user will able to pass the parameter name like in a standard PowerShell cmdlet.
Finally, we are going to format the script so that it looks more reliable and make some refactoring so that the logic is simpler.</description></item><item><title>PowerShell for IT Professionals [#15] – Scripting part 2 – IF and psobject</title><link>https://kamilpro.com/powershell-for-it-professionals-15-scripting-part-2-if-and-psobject/</link><pubDate>Mon, 05 Oct 2020 17:16:21 +0000</pubDate><guid>https://kamilpro.com/powershell-for-it-professionals-15-scripting-part-2-if-and-psobject/</guid><description>In this lesson we carry on writing the scripting by gathering requirements and putting them together as comments in code.
Then we will retrieve OS information with the help of WMI and display it on the screen with Write-Host.
Although using Write-Host is easy to use, it doesn’t really allow us to do very much e.g. we cannot export information to the CSV, therefore we change it and start using custom PSObject – that way our script will start returning information like a regular PowerShell command.</description></item></channel></rss>