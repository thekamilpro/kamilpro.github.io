<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>psobject - Tag - Kamil Pro</title><link>https://kamilpro.github.io/tags/psobject/</link><description>psobject - Tag - Kamil Pro</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Kamil Procyszyn</copyright><lastBuildDate>Tue, 13 Oct 2020 19:12:40 +0000</lastBuildDate><atom:link href="https://kamilpro.github.io/tags/psobject/" rel="self" type="application/rss+xml"/><item><title>PowerShell for IT Professionals [#16] – Scripting part 3 – Add-Member and network</title><link>https://kamilpro.github.io/powershell-for-it-professionals-16-scripting-part-3-add-member-and-network/</link><pubDate>Tue, 13 Oct 2020 19:12:40 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-for-it-professionals-16-scripting-part-3-add-member-and-network/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2020/10/Writing-first-script-pt3.jpg" referrerpolicy="no-referrer">
&lt;/div>In this lesson we are taking our script further by adding details about IP configuration and last installed hotfixes.
But it turns out, the networking information is not that shallow as it seems at the first glance – thus I’ll show you how to retrieve the information from the configuration.
We will also look on how to reuse our already created object so that we don’t need to duplicate code.</description></item><item><title>PowerShell for IT Professionals [#15] – Scripting part 2 – IF and psobject</title><link>https://kamilpro.github.io/powershell-for-it-professionals-15-scripting-part-2-if-and-psobject/</link><pubDate>Mon, 05 Oct 2020 17:16:21 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-for-it-professionals-15-scripting-part-2-if-and-psobject/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2020/10/Writing-first-script-pt2.jpg" referrerpolicy="no-referrer">
&lt;/div>In this lesson we carry on writing the scripting by gathering requirements and putting them together as comments in code.
Then we will retrieve OS information with the help of WMI and display it on the screen with Write-Host.
Although using Write-Host is easy to use, it doesn’t really allow us to do very much e.g. we cannot export information to the CSV, therefore we change it and start using custom PSObject – that way our script will start returning information like a regular PowerShell command.</description></item></channel></rss>