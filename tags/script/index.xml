<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>script - Tag - Kamil Pro</title><link>https://kamilpro.github.io/tags/script/</link><description>script - Tag - Kamil Pro</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Kamil Procyszyn</copyright><lastBuildDate>Fri, 21 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kamilpro.github.io/tags/script/" rel="self" type="application/rss+xml"/><item><title>PowerShell function - converting script into function with parameters</title><link>https://kamilpro.github.io/powershell-function/</link><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-function/</guid><description><![CDATA[So you&rsquo;ve been writing your scripts for some time and wondering how to make them more PowerShell-like, so that they can be invoked from the console like all the other cmdlets?
In this quick video I&rsquo;ll show you how to convert a sample script into function, add parameters and indicated to your user how to use your function with mandatory parameters and types.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Sample script which asks user for basic information, then manipulates it and # display some information # There&#39;s no way (at least easy) to pass these parameters from prompt, nor validate $Name = Read-Host -Prompt &#34;What&#39;s your name?]]></description></item><item><title>PowerShell Hash Table - Storing key value pairs</title><link>https://kamilpro.github.io/powershell-hash-table/</link><pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-hash-table/</guid><description>Quick crash course into using hash tables in PowerShell.
amp;lt;#PSScriptInfo .</description></item><item><title>PowerShell Array and ArrayList - storing multiple items as a one variable</title><link>https://kamilpro.github.io/powershell-array-and-arraylist/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-array-and-arraylist/</guid><description>Array is a basic data structure that allows to store multiple items in one variable. In this short video, I&amp;rsquo;ll show you how to create a basic array, populate it with items, how to add, access and modify items within array.
In addition, I&amp;rsquo;ll present to you how to use ArrayList - which is much more flexible array, especially for adding more items.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 # Link to the video: https://youtu.</description></item><item><title>PowerShell Switch Statement - Different take on branching</title><link>https://kamilpro.github.io/powershell-switch-statement/</link><pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-switch-statement/</guid><description>One switch statement can replace multiple if/else statements, it makes code more readable and is really easy to use - there&amp;rsquo;s no reason why you shouldn&amp;rsquo;t give it a try!
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 # Link to the video: https://youtu.</description></item><item><title>PowerShell If statement - controlling the flow of your code</title><link>https://kamilpro.github.io/powershell-if-statement/</link><pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-if-statement/</guid><description>In this video we are exploring how to use If statement in various scenarios. If statement allows you to take tide control over the execution of your code, by dictating your script what to do in a given situation.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 # Link to the video: https://youtu.</description></item><item><title>PowerShell for IT Professionals [#19] – Websites and APIs</title><link>https://kamilpro.github.io/powershell-for-it-professionals-19-websites-and-apis/</link><pubDate>Sun, 15 Nov 2020 20:57:20 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-for-it-professionals-19-websites-and-apis/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2020/11/Slide1-1.jpg" referrerpolicy="no-referrer">
&lt;/div>PowerShell is a great server automation tool, but what about Internet and any other web served services?
As it turns out, PowerShell is great in scrapping websites and consuming APIs – and it’s been one of the main development areas of the tool in the last couple of years.
In this lesson we are going to see how to use PowerShell to download files, scrap websites, discover links.
We will then use an API of PasswordPusher (pwpush.</description></item><item><title>PowerShell for IT Professionals [#17] – Scripting part 4 – parameters, running remotely and formatting</title><link>https://kamilpro.github.io/powershell-for-it-professionals-17-scripting-part-4-parameters-running-remotely-and-formatting/</link><pubDate>Mon, 19 Oct 2020 18:32:20 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-for-it-professionals-17-scripting-part-4-parameters-running-remotely-and-formatting/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2020/10/Writing-first-script-pt4.jpg" referrerpolicy="no-referrer">
&lt;/div>In the last part of scripting series, we will make the script to be able to query remote machines, e.g. servers.
We will also check how to add parameters to the script (and configure the default value of parameter) so that user will able to pass the parameter name like in a standard PowerShell cmdlet.
Finally, we are going to format the script so that it looks more reliable and make some refactoring so that the logic is simpler.</description></item><item><title>PowerShell for IT Professionals [#16] – Scripting part 3 – Add-Member and network</title><link>https://kamilpro.github.io/powershell-for-it-professionals-16-scripting-part-3-add-member-and-network/</link><pubDate>Tue, 13 Oct 2020 19:12:40 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-for-it-professionals-16-scripting-part-3-add-member-and-network/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2020/10/Writing-first-script-pt3.jpg" referrerpolicy="no-referrer">
&lt;/div>In this lesson we are taking our script further by adding details about IP configuration and last installed hotfixes.
But it turns out, the networking information is not that shallow as it seems at the first glance – thus I’ll show you how to retrieve the information from the configuration.
We will also look on how to reuse our already created object so that we don’t need to duplicate code.</description></item><item><title>PowerShell for IT Professionals [#15] – Scripting part 2 – IF and psobject</title><link>https://kamilpro.github.io/powershell-for-it-professionals-15-scripting-part-2-if-and-psobject/</link><pubDate>Mon, 05 Oct 2020 17:16:21 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-for-it-professionals-15-scripting-part-2-if-and-psobject/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2020/10/Writing-first-script-pt2.jpg" referrerpolicy="no-referrer">
&lt;/div>In this lesson we carry on writing the scripting by gathering requirements and putting them together as comments in code.
Then we will retrieve OS information with the help of WMI and display it on the screen with Write-Host.
Although using Write-Host is easy to use, it doesn’t really allow us to do very much e.g. we cannot export information to the CSV, therefore we change it and start using custom PSObject – that way our script will start returning information like a regular PowerShell command.</description></item><item><title>PowerShell for IT Professionals [#14] – Scripting – Hello World!</title><link>https://kamilpro.github.io/powershell-for-it-professionals-14-scripting-hello-world/</link><pubDate>Sat, 26 Sep 2020 13:00:35 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-for-it-professionals-14-scripting-hello-world/</guid><description>&lt;div class="featured-image">
&lt;img src="/wp-content/uploads/2020/09/Writing-first-script.jpg" referrerpolicy="no-referrer">
&lt;/div>In this lesson we will be preparing our workstation for writing PowerShell scripts. We will start by enabling RSAT and then install Visual Studio Code which is a recommended and free PowerShell code editor.
We will then have a look at the basic function of VS Code and create a simple “Hello World” script.
Exercises If you haven’t followed along, you definitely would like to install VS Code and create a *.</description></item></channel></rss>