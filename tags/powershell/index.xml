<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>powershell on Kamil Pro</title><link>https://kamilpro.github.io/tags/powershell/</link><description>Recent content in powershell on Kamil Pro</description><image><title>Kamil Pro</title><url>https://kamilpro.github.io/logo.png</url><link>https://kamilpro.github.io/logo.png</link></image><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Kamil Procyszyn</copyright><lastBuildDate>Sun, 16 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kamilpro.github.io/tags/powershell/index.xml" rel="self" type="application/rss+xml"/><item><title>Speaking at PsDayUk 2023</title><link>https://kamilpro.github.io/speaking-at-psdayuk-2023/</link><pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate><guid>https://kamilpro.github.io/speaking-at-psdayuk-2023/</guid><description>Side note, I was meant to publish this back in March 2023&amp;hellip;
When I attended my first PowerShell meetup back in 2017, I had no idea it would lead me to where I am today.
Fast forward to 3rd of March 2023, I was privileged to speak and share my knowledge with other #PowerShell enthusiasts at #PsDayUk conference. I presented the PowerShell based web server and web framework, which enables anyone familiar with the language, to create web applications.</description></item><item><title>PowerShell Error Handling - One error at the time please</title><link>https://kamilpro.github.io/powershell-error-handling/</link><pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-error-handling/</guid><description>Code fails - whether because of reasons out of our control, or because we didn&amp;rsquo;t consider the situation it might fail. Expired credentials, timeout connections, lack of permissions go genuine software bug - each of these are potential problem which might fall our code over. And if we don&amp;rsquo;t handle the error, our script will simply throw and terminate. It&amp;rsquo;s certainly not desired state.
In this video I&amp;rsquo;ll show you different ways PowerShell can error, how to debug such errors and how to handle them - so that we are in control.</description></item><item><title>Developing a Web Application with PowerShell - Pode, the PowerFul Module</title><link>https://kamilpro.github.io/powershell-powerful-pode-podeweb/</link><pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-powerful-pode-podeweb/</guid><description>Web Applications are popular, and often require to either knowing some front-end development or using some other products which allow to build some applications. What about PowerShell, can you actually build a web app using only PowerShell language?
Yes, you can write a web app in PowerShell, and I&amp;rsquo;m going to show you how in this video.
It comes down to two PowerShell modules - Pode and Pode.Web - all you need to do is to run Install-Module Pode,Pode.</description></item><item><title>Building PowerShell module on Azure DevOps pipeline - step by step guide</title><link>https://kamilpro.github.io/powershell-module-building-azure-devops/</link><pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-module-building-azure-devops/</guid><description>The World talks constantly about DevOps, CI/CI pipelines, automation - which great, but where to actually start? Especially when you&amp;rsquo;ve been writing PowerShell which is often used as automation language, but not actually as programming language?
In this video I&amp;rsquo;ll show you how to create a build pipeline for PowerShell module, from scratch. We will start from creating a project, creating new Git repository, pushing code to repository to finally create a pipeline which takes care of building the module, versioning it and finally publishing.</description></item><item><title>Building PowerShell Module - how to organise your source files and build with ease</title><link>https://kamilpro.github.io/powershell-module-building/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-module-building/</guid><description>Organising all files, scripts and functions required to build a module might give one a headache. PowerShell doesn&amp;rsquo;t come with native way of building the module, which doesn&amp;rsquo;t make our job easier.
Hence, we&amp;rsquo;re going to use ModuleBuilder from PowerShell community so that the way we organise the code is predictable and used widely across other PowerShell projects.
In this video I&amp;rsquo;ll walk you through the process of preparing, organising and finally building the module.</description></item><item><title>PowerShell Module and Manifest- create and configure your tools</title><link>https://kamilpro.github.io/powershell-module-manifest/</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-module-manifest/</guid><description>The more PowerShell code you write results in more and more scripts. Often you have multiple scripts managing one domain or application. What in situation when scripts start to use other scripts to work, creating so called dependency?
PowerShell module is the answer - it&amp;rsquo;s the native way of bundling in multiple functions together as a single file. And the best comes with Module&amp;rsquo;s Manifest, a file that describes things like version of your module, requirements for it to run, author&amp;rsquo;s details etc.</description></item><item><title>PowerShell Parameter Attributes - validate, group, require params and add pipeline to your function</title><link>https://kamilpro.github.io/powershell-parameter/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-parameter/</guid><description>Having properly configured parameters help your users to understand the use of your function. It also helps fellow developers to appreciate the intended use of the function. In addition, it gives you more control of how the code flows through your script.
Parameter attributes is what takes parameters to the next level - you can specify that certain parameters are mandatory, group them together so that only certain combination of parameters is meant to work together, we can even add pipeline support so that function can be used as any other built-in function.</description></item><item><title>PowerShell function - converting script into function with parameters</title><link>https://kamilpro.github.io/powershell-function/</link><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-function/</guid><description>So you&amp;rsquo;ve been writing your scripts for some time and wondering how to make them more PowerShell-like, so that they can be invoked from the console like all the other cmdlets?
In this quick video I&amp;rsquo;ll show you how to convert a sample script into function, add parameters and indicated to your user how to use your function with mandatory parameters and types.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Sample script which asks user for basic information, then manipulates it and # display some information # There&amp;#39;s no way (at least easy) to pass these parameters from prompt, nor validate $Name = Read-Host -Prompt &amp;#34;What&amp;#39;s your name?</description></item><item><title>PowerShell PSCustomObject - Custom Object, the way it was meant to be</title><link>https://kamilpro.github.io/powershell-pscustomobject/</link><pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-pscustomobject/</guid><description>Everything is an object in PowerShell, and ability to create own object allows for one more way of controlling and handling data.
In this video I&amp;rsquo;ll take you through the steps of creating PSCustomObject, working with its properties to doing more advanced topics - like adding methods and types to the object.
amp;lt;#PSScriptInfo .</description></item><item><title>PowerShell Hash Table - Storing key value pairs</title><link>https://kamilpro.github.io/powershell-hash-table/</link><pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-hash-table/</guid><description>Quick crash course into using hash tables in PowerShell.
amp;lt;#PSScriptInfo .</description></item><item><title>PowerShell Array and ArrayList - storing multiple items as a one variable</title><link>https://kamilpro.github.io/powershell-array-and-arraylist/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-array-and-arraylist/</guid><description>Array is a basic data structure that allows to store multiple items in one variable. In this short video, I&amp;rsquo;ll show you how to create a basic array, populate it with items, how to add, access and modify items within array.
In addition, I&amp;rsquo;ll present to you how to use ArrayList - which is much more flexible array, especially for adding more items.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 # Link to the video: https://youtu.</description></item><item><title>PowerShell Switch Statement - Different take on branching</title><link>https://kamilpro.github.io/powershell-switch-statement/</link><pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-switch-statement/</guid><description>One switch statement can replace multiple if/else statements, it makes code more readable and is really easy to use - there&amp;rsquo;s no reason why you shouldn&amp;rsquo;t give it a try!
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 # Link to the video: https://youtu.</description></item><item><title>PowerShell For loop</title><link>https://kamilpro.github.io/powershell-for-loop/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-loop/</guid><description>For loop - do you actually need it, since there&amp;rsquo;s foreach loop? Turns out, yes - there are situations where for loop comes very handy.
In this video I&amp;rsquo;ll show you the basic syntax of the for loop, going through nested for loops to end up with real case scenario from Azure Application Insights.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 # Link to the video: https://youtu.</description></item><item><title>PowerShell If statement - controlling the flow of your code</title><link>https://kamilpro.github.io/powershell-if-statement/</link><pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-if-statement/</guid><description>In this video we are exploring how to use If statement in various scenarios. If statement allows you to take tide control over the execution of your code, by dictating your script what to do in a given situation.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 # Link to the video: https://youtu.</description></item><item><title>PowerShell for IT Professionals [#20] – Next Steps with PowerShell</title><link>https://kamilpro.github.io/powershell-for-it-professionals-20-next-steps-with-powershell/</link><pubDate>Thu, 26 Nov 2020 17:46:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-20-next-steps-with-powershell/</guid><description>Congratulations! This is 20th and last lesson in the course – and my aim here is to show you various paths you can take your PowerShell journey to.
I’m going to show what else you can do within PowerShell itself, as well how to keep up-to-day plus – what other doors writing code has opened for you – I’d love to hear back about this!
I hope you’ve enjoyed the course so far and it will be helped you in some way – either solve a problem, got promotion, or simply learnt something new.</description></item><item><title>PowerShell for IT Professionals [#19] – Websites and APIs</title><link>https://kamilpro.github.io/powershell-for-it-professionals-19-websites-and-apis/</link><pubDate>Sun, 15 Nov 2020 20:57:20 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-19-websites-and-apis/</guid><description>PowerShell is a great server automation tool, but what about Internet and any other web served services?
As it turns out, PowerShell is great in scrapping websites and consuming APIs – and it’s been one of the main development areas of the tool in the last couple of years.
In this lesson we are going to see how to use PowerShell to download files, scrap websites, discover links.
We will then use an API of PasswordPusher (pwpush.</description></item><item><title>PowerShell for IT Professionals [#18] – Working with text strings</title><link>https://kamilpro.github.io/powershell-for-it-professionals-18-working-with-text-strings/</link><pubDate>Tue, 03 Nov 2020 17:33:18 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-18-working-with-text-strings/</guid><description>Although PowerShell treats everything as object - including text strings - working with text might be particularly difficult - at least when first approached.
In this lesson we are going to have a closer look at what is possible with built in text methods and see how these can help us e.g. by extracting a substring of text.
PowerShell can also be great at parsing log files - we will use Select-String to quickly filter out the lines of text with the phrase we are looking for e.</description></item><item><title>PowerShell for IT Professionals [#17] – Scripting part 4 – parameters, running remotely and formatting</title><link>https://kamilpro.github.io/powershell-for-it-professionals-17-scripting-part-4-parameters-running-remotely-and-formatting/</link><pubDate>Mon, 19 Oct 2020 18:32:20 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-17-scripting-part-4-parameters-running-remotely-and-formatting/</guid><description>In the last part of scripting series, we will make the script to be able to query remote machines, e.g. servers.
We will also check how to add parameters to the script (and configure the default value of parameter) so that user will able to pass the parameter name like in a standard PowerShell cmdlet.
Finally, we are going to format the script so that it looks more reliable and make some refactoring so that the logic is simpler.</description></item><item><title>PowerShell for IT Professionals [#16] – Scripting part 3 – Add-Member and network</title><link>https://kamilpro.github.io/powershell-for-it-professionals-16-scripting-part-3-add-member-and-network/</link><pubDate>Tue, 13 Oct 2020 19:12:40 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-16-scripting-part-3-add-member-and-network/</guid><description>In this lesson we are taking our script further by adding details about IP configuration and last installed hotfixes.
But it turns out, the networking information is not that shallow as it seems at the first glance – thus I’ll show you how to retrieve the information from the configuration.
We will also look on how to reuse our already created object so that we don’t need to duplicate code.</description></item><item><title>PowerShell for IT Professionals [#15] – Scripting part 2 – IF and psobject</title><link>https://kamilpro.github.io/powershell-for-it-professionals-15-scripting-part-2-if-and-psobject/</link><pubDate>Mon, 05 Oct 2020 17:16:21 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-15-scripting-part-2-if-and-psobject/</guid><description>In this lesson we carry on writing the scripting by gathering requirements and putting them together as comments in code.
Then we will retrieve OS information with the help of WMI and display it on the screen with Write-Host.
Although using Write-Host is easy to use, it doesn’t really allow us to do very much e.g. we cannot export information to the CSV, therefore we change it and start using custom PSObject – that way our script will start returning information like a regular PowerShell command.</description></item><item><title>PowerShell for IT Professionals [#14] – Scripting – Hello World!</title><link>https://kamilpro.github.io/powershell-for-it-professionals-14-scripting-hello-world/</link><pubDate>Sat, 26 Sep 2020 13:00:35 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-14-scripting-hello-world/</guid><description>In this lesson we will be preparing our workstation for writing PowerShell scripts. We will start by enabling RSAT and then install Visual Studio Code which is a recommended and free PowerShell code editor.
We will then have a look at the basic function of VS Code and create a simple “Hello World” script.
Exercises If you haven’t followed along, you definitely would like to install VS Code and create a *.</description></item><item><title>PowerShell for IT Professionals [#13] – Is PowerShell secure?</title><link>https://kamilpro.github.io/powershell-for-it-professionals-13-is-powershell-secure/</link><pubDate>Sat, 12 Sep 2020 16:09:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-13-is-powershell-secure/</guid><description>In this lesson we will have a look on PowerShell built in security features and how it differs from e.g. BAT files.
We will then have a look how execution policy can help to control on what basis the PowerShell scripts can be executed.
At the end, we will configure some GPOs to control the execution and transcription of scripts.</description></item><item><title>PowerShell for IT Professionals [#12] – WMI – Windows Management Instrumentation</title><link>https://kamilpro.github.io/powershell-for-it-professionals-12-wmi-windows-management-instrumentation/</link><pubDate>Sat, 05 Sep 2020 16:27:10 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-12-wmi-windows-management-instrumentation/</guid><description>In this lesson we learn how to use PowerShell to access WMI (Windows Management Instrumentation), so that we can gain often hidden or obscure information.
We will then use WMI Explorer graphical tool to ease discovering all possible classes and instances that WMI provides.
Finally, we will use WMI queries to add another level of granularity in GPO so that we can target very specific computers in it.
Exercises There’s a WMI class that lists all the installed software – find it and list all currently installed software with PowerShell.</description></item><item><title>PowerShell for IT Professionals [#11] – Variables</title><link>https://kamilpro.github.io/powershell-for-it-professionals-11-variables/</link><pubDate>Sat, 29 Aug 2020 10:39:05 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-11-variables/</guid><description>In this lesson we’re going to learn how what Variables are, why it’s good to use them and how to actually create them. We will then assign various values to variables to and use them solely, and in parameters.
We will also have a look at foreach loop so that we can e.g. ping multiple computers using single variable with multiple objects in it.
Exercises Use Get-Command to find all commands that allow you to manage variables.</description></item><item><title>PowerShell for IT Professionals [#10] – Remote management with PowerShell</title><link>https://kamilpro.github.io/powershell-for-it-professionals-10-remote-management-with-powershell/</link><pubDate>Mon, 24 Aug 2020 10:00:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-10-remote-management-with-powershell/</guid><description>In this lesson we’re going to learn how to do one-to-one and one-to-many remote management with PowerShell. There’s no need for telnet, ssh or psexec as PowerShell has its own protocol that’s built in right into Windows. We will look at how to create interactive sessions and send commands to multiple servers at once.
Exercises With Enter-PSSesion, Remote to remote server and&amp;nbsp; restart &amp;#8220;Windows update&amp;#8221; service With Invoke-Command find out the remote computers last boot up/startup time List all running processes on remote server without using Enter-PsSession or Invoke-Command If you have a Domain Controller available, use Invoke-Command to list all computers on that network (you can use * for filter), remember that you need to provide all necessary parameters with your command in the script block so command just runs and doesn&amp;#8217;t prompt for any additional information.</description></item><item><title>PowerShell for IT Professionals [#9] – Setting up Active Directory</title><link>https://kamilpro.github.io/powershell-for-it-professionals-9-setting-up-active-directory/</link><pubDate>Wed, 19 Aug 2020 12:49:09 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-9-setting-up-active-directory/</guid><description>Exercises On domain controller, find module that allows to manage Active Directory List all the Active Directory users List members of “Enterprise Administrators” Find the feature name for Windows Server Backup and install it with PowerShell Commands 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ### Server # Check IP configuration # Show steps in Server how to install # Check hostname Hostname # Rename server Rename-Computer ps-svr1 # Restart computer Reboot-computer # Get-WindowsFeature # Install-WindowsFeature Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools Install-ADDSForest -DomainName posh.</description></item><item><title>PowerShell for IT Professionals [#8] – Manage everything with PowerShell</title><link>https://kamilpro.github.io/powershell-for-it-professionals-8-manage-everything-with-powershell/</link><pubDate>Fri, 14 Aug 2020 16:31:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-8-manage-everything-with-powershell/</guid><description>Exercises Can you uninstall module that was installed with Install-Module? Confirm your answer with Get-Module -ListAvaiable Can you update the installed module? Perhaps, you’d like to install version 1.0.0.0 of SNMP module, how can you force Install-Module to do so? Install-Module error If you encounter the issue with downloading modules, run this commandlet as a temporary workaround (it must be applied every time the shell is restarted):
&amp;#91;Net.ServicePointManager]::SecurityProtocol = &amp;#91;Net.</description></item><item><title>PowerShell for IT Professionals [#7] – Formatting output</title><link>https://kamilpro.github.io/powershell-for-it-professionals-7-formatting-output/</link><pubDate>Tue, 11 Aug 2020 12:35:44 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-7-formatting-output/</guid><description>Exercises Send output of any commandlet, e.g. get service to Printer
Lesson notes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 # So far, we&amp;#39;ve been using default PowerShell behaviour for formatting output # Although in the last lesson we did filtering data with Where-Object and Select-Object # We didn&amp;#39;t really focus on how data is presented on the screen.</description></item><item><title>PowerShell for IT Professionals [#6] – Filtering output</title><link>https://kamilpro.github.io/powershell-for-it-professionals-6-filtering-output/</link><pubDate>Fri, 07 Aug 2020 12:00:32 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-6-filtering-output/</guid><description>Exercises List all services that are stopped List all service that are stopped and they name begins with W Display only the Display Name of services that stopped and their name begins with W Lesson notes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 ### Filtering # Some commands accept wild cards in the search or have a filter parameter Get-Service -Name w*,b* #But there&amp;#39;s more universal method, based on property names Get-Service | Where-Object -Filter {$_.</description></item><item><title>PowerShell for IT Professionals [#5] – Providers</title><link>https://kamilpro.github.io/powershell-for-it-professionals-5-providers/</link><pubDate>Tue, 04 Aug 2020 10:55:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-5-providers/</guid><description>Exercises Create a folder in root of C: with the name of PowerShell Create a file inside the folder with the name of your choice and no content Retrieve all items from Env: drive Check the version of Notepad.exe in Windows directory Discover current Windows build version by registry property: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion Notes from the lesson 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 # Provider allows to access some data storage (e.</description></item><item><title>PowerShell for IT Professionals [#4] – Pipeline</title><link>https://kamilpro.github.io/powershell-for-it-professionals-4-pipeline/</link><pubDate>Thu, 30 Jul 2020 07:45:57 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-4-pipeline/</guid><description>Exercises There’s one particular command that allows you output anything from shell to file, find that command and use with any commands like Get-Service or Get-Process. Does it behave differently than Export-CSV?
Programs often use CSV but don’t use comma for delimiter – try to exporting to CSV but change the delimiter
Can you print directly from shell? See if there are any commands available and if so, print some Event Logs!</description></item><item><title>PowerShell for IT Professionals [#3] – Running Commands</title><link>https://kamilpro.github.io/powershell-for-it-professionals-2-running-commands/</link><pubDate>Mon, 27 Jul 2020 19:08:38 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-2-running-commands/</guid><description>Exercises Display a list of all services that start with the letter W Display all processes (you might need to use Help to discover the right command. Remember the noun might be singular). Open Notepad (you can simply punch in notepad in the shell) Display only processes that have a name “Notepad” Once you can there’s only one instance of Notepad running, close it with PowerShell! (Verb would be Stop) Confirm with Shell there are no more Notepad processes running Display last 10 lines of C:\windows\setupact.</description></item><item><title>PowerShell for IT Professionals [#1] [#2] – Help</title><link>https://kamilpro.github.io/powershell-for-it-professionals-1-help/</link><pubDate>Thu, 23 Jul 2020 16:32:54 +0000</pubDate><guid>https://kamilpro.github.io/powershell-for-it-professionals-1-help/</guid><description>About files solve issue If after running Update-Help you don’t have About topics, you might want to manually download them and extract the archive to the root of:
C:\Windows\System32\WindowsPowerShell\v1.0\en
PowerShell help – Exercises PowerShell is great in working with CSV files. Can you find help for any CSV related commands (you will need to use a wildcard)
Can you tell what’s a difference between ConvertTo-CSV and Export-CSV commands
We often need to review event logs – which command would allow you to retrieve event logs?</description></item><item><title>Restarting VSS Writers with PowerShell script</title><link>https://kamilpro.github.io/restarting-vss-writers-with-powershell-script/</link><pubDate>Sun, 01 Dec 2019 18:27:18 +0000</pubDate><guid>https://kamilpro.github.io/restarting-vss-writers-with-powershell-script/</guid><description>VSS Writers are responsible for backups – if they stop working, then backups might fail. The solution to that is restarting VSS Writers, but the problem here is that there are many, and at least out of the box, there’s no mechanism to make this automatic… but there’s PowerShell.
I’m not interested in your code, I just want to restart these VSS Writers In that case, head on to: mygithub, use the code and run:</description></item><item><title>Use Windows Server as iSCSI target with ESXi</title><link>https://kamilpro.github.io/use-windows-server-as-iscsi-target-with-esxi/</link><pubDate>Wed, 15 Aug 2018 17:54:47 +0000</pubDate><guid>https://kamilpro.github.io/use-windows-server-as-iscsi-target-with-esxi/</guid><description>The task: to move a virtual machine from one ESXi to another. The ESXis are on two completely separate networks. VM size is 5.5 TB, with one file being 5TB.
The problem: VM cannot be started due to maxed out resources. There’s no NAS or any other means of storage where the files could be transferred to. From previous experience, I knew that transfer over SSH or USB would be well too slow, as the task was time critical.</description></item><item><title>Resolve IP and DNS with Powershell tool</title><link>https://kamilpro.github.io/powershell-tool-resolve-ip-and-dns/</link><pubDate>Sun, 29 Apr 2018 21:40:00 +0000</pubDate><guid>https://kamilpro.github.io/powershell-tool-resolve-ip-and-dns/</guid><description>I’ve been asked to prepare a simple tool which would:
Resolve IP address or DNS Return all results to table Import addresses from a file The reason behind was to check how IP/DNS records change over the period of time, therefore there was a need for something like that:
A file with all addresses in question Tool which could import all these addresses and resolve them Save the results into a new file Once having at least a couple of files, the results could be compared.</description></item><item><title>Powershell – resolve full names to usernames from CSV file</title><link>https://kamilpro.github.io/powershell-resolve-full-names-usernames-csv-file/</link><pubDate>Sat, 21 Oct 2017 14:03:58 +0000</pubDate><guid>https://kamilpro.github.io/powershell-resolve-full-names-usernames-csv-file/</guid><description>It’s unbelievable how long it took me to figure out this simple Powershell script, but yet it does the trick :).
Often you receive a request to do a certain action with a bunch of accounts, and (obviously) the list provided contains the full names rather usernames. Pain to do it manually, but yet we can utilise Powershell here.
What you need: CSV file, with only one column, and the header of the column must be called “Name”, if you prefer to use something different, simply amend Name in line 6 to reflect your header.</description></item></channel></rss>