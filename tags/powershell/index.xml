<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>powershell - Tag - Kamil Pro</title><link>https://kamilpro.github.io/tags/powershell/</link><description>powershell - Tag - Kamil Pro</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Kamil Procyszyn</copyright><lastBuildDate>Sat, 21 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kamilpro.github.io/tags/powershell/" rel="self" type="application/rss+xml"/><item><title>PowerShell Error Handling - One error at the time please</title><link>https://kamilpro.github.io/powershell-error-handling/</link><pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-error-handling/</guid><description><![CDATA[Code fails - whether because of reasons out of our control, or because we didn&rsquo;t consider the situation it might fail. Expired credentials, timeout connections, lack of permissions go genuine software bug - each of these are potential problem which might fall our code over. And if we don&rsquo;t handle the error, our script will simply throw and terminate. It&rsquo;s certainly not desired state.
In this video I&rsquo;ll show you different ways PowerShell can error, how to debug such errors and how to handle them - so that we are in control.]]></description></item><item><title>Developing a Web Application with PowerShell - Pode, the PowerFul Module</title><link>https://kamilpro.github.io/powershell-powerful-pode-podeweb/</link><pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-powerful-pode-podeweb/</guid><description>Web Applications are popular, and often require to either knowing some front-end development or using some other products which allow to build some applications. What about PowerShell, can you actually build a web app using only PowerShell language?
Yes, you can write a web app in PowerShell, and I&amp;rsquo;m going to show you how in this video.
It comes down to two PowerShell modules - Pode and Pode.Web - all you need to do is to run Install-Module Pode,Pode.</description></item><item><title>Building PowerShell module on Azure DevOps pipeline - step by step guide</title><link>https://kamilpro.github.io/powershell-module-building-azure-devops/</link><pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-module-building-azure-devops/</guid><description>The World talks constantly about DevOps, CI/CI pipelines, automation - which great, but where to actually start? Especially when you&amp;rsquo;ve been writing PowerShell which is often used as automation language, but not actually as programming language?
In this video I&amp;rsquo;ll show you how to create a build pipeline for PowerShell module, from scratch. We will start from creating a project, creating new Git repository, pushing code to repository to finally create a pipeline which takes care of building the module, versioning it and finally publishing.</description></item><item><title>Building PowerShell Module - how to organise your source files and build with ease</title><link>https://kamilpro.github.io/powershell-module-building/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-module-building/</guid><description><![CDATA[Organising all files, scripts and functions required to build a module might give one a headache. PowerShell doesn&rsquo;t come with native way of building the module, which doesn&rsquo;t make our job easier.
Hence, we&rsquo;re going to use ModuleBuilder from PowerShell community so that the way we organise the code is predictable and used widely across other PowerShell projects.
In this video I&rsquo;ll walk you through the process of preparing, organising and finally building the module.]]></description></item><item><title>PowerShell Module and Manifest- create and configure your tools</title><link>https://kamilpro.github.io/powershell-module-manifest/</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-module-manifest/</guid><description>The more PowerShell code you write results in more and more scripts. Often you have multiple scripts managing one domain or application. What in situation when scripts start to use other scripts to work, creating so called dependency?
PowerShell module is the answer - it&amp;rsquo;s the native way of bundling in multiple functions together as a single file. And the best comes with Module&amp;rsquo;s Manifest, a file that describes things like version of your module, requirements for it to run, author&amp;rsquo;s details etc.</description></item><item><title>PowerShell Parameter Attributes - validate, group, require params and add pipeline to your function</title><link>https://kamilpro.github.io/powershell-parameter/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-parameter/</guid><description>Having properly configured parameters help your users to understand the use of your function. It also helps fellow developers to appreciate the intended use of the function. In addition, it gives you more control of how the code flows through your script.
Parameter attributes is what takes parameters to the next level - you can specify that certain parameters are mandatory, group them together so that only certain combination of parameters is meant to work together, we can even add pipeline support so that function can be used as any other built-in function.</description></item><item><title>PowerShell function - converting script into function with parameters</title><link>https://kamilpro.github.io/powershell-function/</link><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-function/</guid><description><![CDATA[So you&rsquo;ve been writing your scripts for some time and wondering how to make them more PowerShell-like, so that they can be invoked from the console like all the other cmdlets?
In this quick video I&rsquo;ll show you how to convert a sample script into function, add parameters and indicated to your user how to use your function with mandatory parameters and types.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Sample script which asks user for basic information, then manipulates it and # display some information # There&#39;s no way (at least easy) to pass these parameters from prompt, nor validate $Name = Read-Host -Prompt &#34;What&#39;s your name?]]></description></item><item><title>PowerShell PSCustomObject - Custom Object, the way it was meant to be</title><link>https://kamilpro.github.io/powershell-pscustomobject/</link><pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-pscustomobject/</guid><description>Everything is an object in PowerShell, and ability to create own object allows for one more way of controlling and handling data.
In this video I&amp;rsquo;ll take you through the steps of creating PSCustomObject, working with its properties to doing more advanced topics - like adding methods and types to the object.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 &amp;lt;#PSScriptInfo .</description></item><item><title>PowerShell Hash Table - Storing key value pairs</title><link>https://kamilpro.github.io/powershell-hash-table/</link><pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-hash-table/</guid><description>Quick crash course into using hash tables in PowerShell.
amp;lt;#PSScriptInfo .</description></item><item><title>PowerShell Array and ArrayList - storing multiple items as a one variable</title><link>https://kamilpro.github.io/powershell-array-and-arraylist/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><author>Kamil</author><guid>https://kamilpro.github.io/powershell-array-and-arraylist/</guid><description>Array is a basic data structure that allows to store multiple items in one variable. In this short video, I&amp;rsquo;ll show you how to create a basic array, populate it with items, how to add, access and modify items within array.
In addition, I&amp;rsquo;ll present to you how to use ArrayList - which is much more flexible array, especially for adding more items.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 # Link to the video: https://youtu.</description></item></channel></rss>