<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Switch on Kamil Pro</title>
    <link>https://kamilpro.com/tags/switch/</link>
    <description>Recent content in Switch on Kamil Pro</description>
    <image>
      <title>Kamil Pro</title>
      <url>https://kamilpro.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kamilpro.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 04 Aug 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://kamilpro.com/tags/switch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PowerShell Switch Statement - Different take on branching</title>
      <link>https://kamilpro.com/about-powershell/powershell-switch-statement/</link>
      <pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-switch-statement/</guid>
      <description>One switch statement can replace multiple if/else statements, it makes code more readable and is really easy to use - there&amp;rsquo;s no reason why you shouldn&amp;rsquo;t give it a try!
# Link to the video: https://youtu.be/EqJ0lBO1rM4 # Documentation: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_switch?view=powershell-7.1 # Basic version &amp;lt;# switch ( test-value ) { condition {do-stuff} another condition {do-stuff} } #&amp;gt; # This will print out Green switch (2) { 0 { &amp;#34;Blue&amp;#34; } 1 { &amp;#34;Yellow&amp;#34;} 2 { &amp;#34;Green&amp;#34;} 3 { &amp;#34;Red&amp;#34;} } # Work with variable $number = 1 switch ($number) { 0 { &amp;#34;Blue&amp;#34; } 1 { &amp;#34;Yellow&amp;#34;} 2 { &amp;#34;Green&amp;#34;} 3 { &amp;#34;Red&amp;#34;} } # Assign variables within scriptblock $number = 3 switch ($number) { 0 { $result = &amp;#34;Blue&amp;#34; } 1 { $result = &amp;#34;Yellow&amp;#34;} 2 { $result = &amp;#34;Green&amp;#34;} 3 { $result = &amp;#34;Red&amp;#34;} } Write-Host &amp;#34;The result is: $result&amp;#34; -ForegroundColor $result # We can also assign statement to variable $number = 0 $result = switch ($number) { 0 { &amp;#34;Blue&amp;#34; } 1 { &amp;#34;Yellow&amp;#34;} 2 { &amp;#34;Green&amp;#34;} 3 { &amp;#34;Red&amp;#34;} } Write-Host &amp;#34;The result is: $result&amp;#34; -ForegroundColor $result # Use default in case there&amp;#39;s no match $number = 8 $result = switch ($number) { 0 { &amp;#34;Blue&amp;#34; } 1 { &amp;#34;Yellow&amp;#34;} 2 { &amp;#34;Green&amp;#34;} 3 { &amp;#34;Red&amp;#34;} default { Write-Warning &amp;#34;Unknown value, defaulting to White&amp;#34; &amp;#34;White&amp;#34; } } Write-Host &amp;#34;The result is: $result&amp;#34; -ForegroundColor $result # Strings can also be matched # This also shows working on expression switch ( (Get-Host).</description>
    </item>
    <item>
      <title>PowerShell If statement - controlling the flow of your code</title>
      <link>https://kamilpro.com/about-powershell/powershell-if-statement/</link>
      <pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-if-statement/</guid>
      <description>In this video we are exploring how to use If statement in various scenarios. If statement allows you to take tide control over the execution of your code, by dictating your script what to do in a given situation.
# Link to the video: https://youtu.be/j8Ubwv8ApdU # Documentation: # Operators: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators?view=powershell-7.1 # About If: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_if?view=powershell-7.1 # Basic version # if something is true then do this if ($true) { &amp;#34;This is true&amp;#34; } if ($false) { &amp;#34;This is false&amp;#34; } # if something is true then do this, otherwise do that if ($true) { &amp;#34;This is true&amp;#34; } else { &amp;#34;This is false&amp;#34; } if ($false) { &amp;#34;This is true&amp;#34; } else { &amp;#34;This is false&amp;#34; } # let&amp;#39;s do some actual example if ( 5 -gt 3 ) { &amp;#34;This is more!</description>
    </item>
  </channel>
</rss>
