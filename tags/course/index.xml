<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Course on Kamil Pro</title>
    <link>https://kamilpro.com/tags/course/</link>
    <description>Recent content in Course on Kamil Pro</description>
    <image>
      <title>Kamil Pro</title>
      <url>https://kamilpro.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kamilpro.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 26 Nov 2020 17:46:00 +0000</lastBuildDate>
    <atom:link href="https://kamilpro.com/tags/course/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PowerShell for IT Professionals [#20] – Next Steps with PowerShell</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-20-next-steps-with-powershell/</link>
      <pubDate>Thu, 26 Nov 2020 17:46:00 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-20-next-steps-with-powershell/</guid>
      <description>Congratulations! This is 20th and last lesson in the course – and my aim here is to show you various paths you can take your PowerShell journey to.
I’m going to show what else you can do within PowerShell itself, as well how to keep up-to-day plus – what other doors writing code has opened for you – I’d love to hear back about this!
I hope you’ve enjoyed the course so far and it will be helped you in some way – either solve a problem, got promotion, or simply learnt something new.</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#19] – Websites and APIs</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-19-websites-and-apis/</link>
      <pubDate>Sun, 15 Nov 2020 20:57:20 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-19-websites-and-apis/</guid>
      <description>PowerShell is a great server automation tool, but what about Internet and any other web served services?
As it turns out, PowerShell is great in scrapping websites and consuming APIs – and it’s been one of the main development areas of the tool in the last couple of years.
In this lesson we are going to see how to use PowerShell to download files, scrap websites, discover links.
We will then use an API of PasswordPusher (pwpush.</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#18] – Working with text strings</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-18-working-with-text-strings/</link>
      <pubDate>Tue, 03 Nov 2020 17:33:18 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-18-working-with-text-strings/</guid>
      <description>Although PowerShell treats everything as object - including text strings - working with text might be particularly difficult - at least when first approached.
In this lesson we are going to have a closer look at what is possible with built in text methods and see how these can help us e.g. by extracting a substring of text.
PowerShell can also be great at parsing log files - we will use Select-String to quickly filter out the lines of text with the phrase we are looking for e.</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#17] – Scripting part 4 – parameters, running remotely and formatting</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-17-scripting-part-4-parameters-running-remotely-and-formatting/</link>
      <pubDate>Mon, 19 Oct 2020 18:32:20 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-17-scripting-part-4-parameters-running-remotely-and-formatting/</guid>
      <description>In the last part of scripting series, we will make the script to be able to query remote machines, e.g. servers.
We will also check how to add parameters to the script (and configure the default value of parameter) so that user will able to pass the parameter name like in a standard PowerShell cmdlet.
Finally, we are going to format the script so that it looks more reliable and make some refactoring so that the logic is simpler.</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#16] – Scripting part 3 – Add-Member and network</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-16-scripting-part-3-add-member-and-network/</link>
      <pubDate>Tue, 13 Oct 2020 19:12:40 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-16-scripting-part-3-add-member-and-network/</guid>
      <description>In this lesson we are taking our script further by adding details about IP configuration and last installed hotfixes.
But it turns out, the networking information is not that shallow as it seems at the first glance – thus I’ll show you how to retrieve the information from the configuration.
We will also look on how to reuse our already created object so that we don’t need to duplicate code.</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#15] – Scripting part 2 – IF and psobject</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-15-scripting-part-2-if-and-psobject/</link>
      <pubDate>Mon, 05 Oct 2020 17:16:21 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-15-scripting-part-2-if-and-psobject/</guid>
      <description>In this lesson we carry on writing the scripting by gathering requirements and putting them together as comments in code.
Then we will retrieve OS information with the help of WMI and display it on the screen with Write-Host.
Although using Write-Host is easy to use, it doesn’t really allow us to do very much e.g. we cannot export information to the CSV, therefore we change it and start using custom PSObject – that way our script will start returning information like a regular PowerShell command.</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#14] – Scripting – Hello World!</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-14-scripting-hello-world/</link>
      <pubDate>Sat, 26 Sep 2020 13:00:35 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-14-scripting-hello-world/</guid>
      <description>In this lesson we will be preparing our workstation for writing PowerShell scripts. We will start by enabling RSAT and then install Visual Studio Code which is a recommended and free PowerShell code editor.
We will then have a look at the basic function of VS Code and create a simple “Hello World” script.
Exercises If you haven’t followed along, you definitely would like to install VS Code and create a *.</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#13] – Is PowerShell secure?</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-13-is-powershell-secure/</link>
      <pubDate>Sat, 12 Sep 2020 16:09:00 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-13-is-powershell-secure/</guid>
      <description>In this lesson we will have a look on PowerShell built in security features and how it differs from e.g. BAT files.
We will then have a look how execution policy can help to control on what basis the PowerShell scripts can be executed.
At the end, we will configure some GPOs to control the execution and transcription of scripts.</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#12] – WMI – Windows Management Instrumentation</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-12-wmi-windows-management-instrumentation/</link>
      <pubDate>Sat, 05 Sep 2020 16:27:10 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-12-wmi-windows-management-instrumentation/</guid>
      <description>In this lesson we learn how to use PowerShell to access WMI (Windows Management Instrumentation), so that we can gain often hidden or obscure information.
We will then use WMI Explorer graphical tool to ease discovering all possible classes and instances that WMI provides.
Finally, we will use WMI queries to add another level of granularity in GPO so that we can target very specific computers in it.
Exercises There’s a WMI class that lists all the installed software – find it and list all currently installed software with PowerShell.</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#11] – Variables</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-11-variables/</link>
      <pubDate>Sat, 29 Aug 2020 10:39:05 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-11-variables/</guid>
      <description>In this lesson we’re going to learn how what Variables are, why it’s good to use them and how to actually create them. We will then assign various values to variables to and use them solely, and in parameters.
We will also have a look at foreach loop so that we can e.g. ping multiple computers using single variable with multiple objects in it.
Exercises Use Get-Command to find all commands that allow you to manage variables.</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#10] – Remote management with PowerShell</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-10-remote-management-with-powershell/</link>
      <pubDate>Mon, 24 Aug 2020 10:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-10-remote-management-with-powershell/</guid>
      <description>In this lesson we’re going to learn how to do one-to-one and one-to-many remote management with PowerShell. There’s no need for telnet, ssh or psexec as PowerShell has its own protocol that’s built in right into Windows. We will look at how to create interactive sessions and send commands to multiple servers at once.
Exercises Notes Enable-Psremoting Enter-PSSesion ps-svr1 Hostname Get-Service GIP # I can even run commands that are not available on my source machine Get-ADDomainController Get-ADUser Exit or Exit-PSSession # Caution about double hoping Invoke-Command Invoke-Command -computerName ps-svr1 -command { get-service} # Invoke command executes commands on the remote comptuers and brings back the results # Can you tell a difference?</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#9] – Setting up Active Directory</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-9-setting-up-active-directory/</link>
      <pubDate>Wed, 19 Aug 2020 12:49:09 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-9-setting-up-active-directory/</guid>
      <description>Exercises On domain controller, find module that allows to manage Active Directory List all the Active Directory users List members of “Enterprise Administrators” Find the feature name for Windows Server Backup and install it with PowerShell Commands ### Server # Check IP configuration # Show steps in Server how to install # Check hostname Hostname # Rename server Rename-Computer ps-svr1 # Restart computer Reboot-computer # Get-WindowsFeature # Install-WindowsFeature Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools Install-ADDSForest -DomainName posh.</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#8] – Manage everything with PowerShell</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-8-manage-everything-with-powershell/</link>
      <pubDate>Fri, 14 Aug 2020 16:31:00 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-8-manage-everything-with-powershell/</guid>
      <description>Exercises Can you uninstall module that was installed with Install-Module? Confirm your answer with Get-Module -ListAvaiable Can you update the installed module? Perhaps, you’d like to install version 1.0.0.0 of SNMP module, how can you force Install-Module to do so? Install-Module error If you encounter the issue with downloading modules, run this commandlet as a temporary workaround (it must be applied every time the shell is restarted):
Source of solution, and also permanent solution can be found at:</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#7] – Formatting output</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-7-formatting-output/</link>
      <pubDate>Tue, 11 Aug 2020 12:35:44 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-7-formatting-output/</guid>
      <description>Exercises Send output of any commandlet, e.g. get service to Printer
Lesson notes # So far, we&amp;#39;ve been using default PowerShell behaviour for formatting output # Although in the last lesson we did filtering data with Where-Object and Select-Object # We didn&amp;#39;t really focus on how data is presented on the screen. Let&amp;#39;s see what can be done here. # Let&amp;#39;s have a look at local Get-LocalGroup Get-LocalGroup | Format-List #Alias is FL #Like with Select-Object, we can specify properties we&amp;#39;re after Get-LocalGroup | fl -Property name,sid #Another example when List might be easier to read then table Get-CimInstance win32_ComputerSystem ## Format Table #ipconfig.</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#6] – Filtering output</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-6-filtering-output/</link>
      <pubDate>Fri, 07 Aug 2020 12:00:32 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-6-filtering-output/</guid>
      <description>Exercises List all services that are stopped List all service that are stopped and they name begins with W Display only the Display Name of services that stopped and their name begins with W Lesson notes ### Filtering # Some commands accept wild cards in the search or have a filter parameter Get-Service -Name w*,b* #But there&amp;#39;s more universal method, based on property names Get-Service | Where-Object -Filter {$_.Status -eq &amp;#39;running&amp;#39; } #So let&amp;#39;s break it down #Where-Object allows to filter out the incoming object based on the comparation operator #Most popular operators are: -eq - Equals -ne - Not equals -gt - Greather than -lt - Less then -le - Less than or equal -ge - Greater than or equal -Like -Notlike #There are more many, you can check these help topics: Help about_Operators Help about_Comparison_Operators #$_ is current object; it&amp;#39;s what we&amp;#39;re piping in our case Get-Service # .</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#5] – Providers</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-5-providers/</link>
      <pubDate>Tue, 04 Aug 2020 10:55:00 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-5-providers/</guid>
      <description>Exercises Create a folder in root of C: with the name of PowerShell Create a file inside the folder with the name of your choice and no content Retrieve all items from Env: drive Check the version of Notepad.exe in Windows directory Discover current Windows build version by registry property: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion Notes from the lesson # Provider allows to access some data storage (e.g. File system, registry, remote system, Active Directory) # This concept might sound a bit abstract at first, but becomes very straight forward once you&amp;#39;ve used it for a while # Provider once connected to the data storage, kind of &amp;#34;mounts&amp;#34; it like a network drive, allowing to browse and manage it # Once the storage is mounted PowerShell creates so called PSDrive # Let&amp;#39;s review available providers Get-Psprovider # Let&amp;#39;s review some PSDrives Get-PSDrive # A quick refresher how file system is organised: Drives, Folders, Files # Since PowerShell connects to many different file data storages, it uses the generic term Item and specifies with type.</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#4] – Pipeline</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-4-pipeline/</link>
      <pubDate>Thu, 30 Jul 2020 07:45:57 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-4-pipeline/</guid>
      <description>Exercises There’s one particular command that allows you output anything from shell to file, find that command and use with any commands like Get-Service or Get-Process. Does it behave differently than Export-CSV?
Programs often use CSV but don’t use comma for delimiter – try to exporting to CSV but change the delimiter
Can you print directly from shell? See if there are any commands available and if so, print some Event Logs!</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#3] – Running Commands</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-2-running-commands/</link>
      <pubDate>Mon, 27 Jul 2020 19:08:38 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-2-running-commands/</guid>
      <description>Exercises Display a list of all services that start with the letter W Display all processes (you might need to use Help to discover the right command. Remember the noun might be singular). Open Notepad (you can simply punch in notepad in the shell) Display only processes that have a name “Notepad” Once you can there’s only one instance of Notepad running, close it with PowerShell! (Verb would be Stop) Confirm with Shell there are no more Notepad processes running Display last 10 lines of C:\windows\setupact.</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals [#1] [#2] – Help</title>
      <link>https://kamilpro.com/powershell-for-it-professionals-1-help/</link>
      <pubDate>Thu, 23 Jul 2020 16:32:54 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-for-it-professionals-1-help/</guid>
      <description>About files solve issue If after running Update-Help you don’t have About topics, you might want to manually download them and extract the archive to the root of:
C:\Windows\System32\WindowsPowerShell\v1.0\en
PowerShell help – Exercises PowerShell is great in working with CSV files. Can you find help for any CSV related commands (you will need to use a wildcard)
Can you tell what’s a difference between ConvertTo-CSV and Export-CSV commands
We often need to review event logs – which command would allow you to retrieve event logs?</description>
    </item>
  </channel>
</rss>
