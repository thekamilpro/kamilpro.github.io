<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PowerShell on Kamil Pro</title>
    <link>https://kamilpro.com/categories/powershell/</link>
    <description>Recent content in PowerShell on Kamil Pro</description>
    <image>
      <title>Kamil Pro</title>
      <url>https://kamilpro.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://kamilpro.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Jul 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://kamilpro.com/categories/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Speaking at PsDayUk 2023</title>
      <link>https://kamilpro.com/posts/2023/speaking-at-psdayuk-2023/</link>
      <pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/posts/2023/speaking-at-psdayuk-2023/</guid>
      <description>Side note, I was meant to publish this back in March 2023&amp;hellip;
When I attended my first PowerShell meetup back in 2017, I had no idea it would lead me to where I am today.
Fast forward to 3rd of March 2023, I was privileged to speak and share my knowledge with other #PowerShell enthusiasts at #PsDayUk conference. I presented the PowerShell based web server and web framework, which enables anyone familiar with the language, to create web applications.</description>
    </item>
    <item>
      <title>PowerShell Error Handling - One error at the time please</title>
      <link>https://kamilpro.com/about-powershell/powershell-error-handling/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-error-handling/</guid>
      <description>Code fails - whether because of reasons out of our control, or because we didn&amp;rsquo;t consider the situation it might fail. Expired credentials, timeout connections, lack of permissions go genuine software bug - each of these are potential problem which might fall our code over. And if we don&amp;rsquo;t handle the error, our script will simply throw and terminate. It&amp;rsquo;s certainly not desired state.
In this video I&amp;rsquo;ll show you different ways PowerShell can error, how to debug such errors and how to handle them - so that we are in control.</description>
    </item>
    <item>
      <title>Developing a Web Application with PowerShell - Pode, the PowerFul Module</title>
      <link>https://kamilpro.com/about-powershell/powershell-powerful-pode-podeweb/</link>
      <pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-powerful-pode-podeweb/</guid>
      <description>Web Applications are popular, and often require to either knowing some front-end development or using some other products which allow to build some applications. What about PowerShell, can you actually build a web app using only PowerShell language?
Yes, you can write a web app in PowerShell, and I&amp;rsquo;m going to show you how in this video.
It comes down to two PowerShell modules - Pode and Pode.Web - all you need to do is to run Install-Module Pode,Pode.</description>
    </item>
    <item>
      <title>Building PowerShell module on Azure DevOps pipeline - step by step guide</title>
      <link>https://kamilpro.com/about-powershell/powershell-module-building-azure-devops/</link>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-module-building-azure-devops/</guid>
      <description>The World talks constantly about DevOps, CI/CI pipelines, automation - which great, but where to actually start? Especially when you&amp;rsquo;ve been writing PowerShell which is often used as automation language, but not actually as programming language?
In this video I&amp;rsquo;ll show you how to create a build pipeline for PowerShell module, from scratch. We will start from creating a project, creating new Git repository, pushing code to repository to finally create a pipeline which takes care of building the module, versioning it and finally publishing.</description>
    </item>
    <item>
      <title>Building PowerShell Module - how to organise your source files and build with ease</title>
      <link>https://kamilpro.com/about-powershell/powershell-module-building/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-module-building/</guid>
      <description>Organising all files, scripts and functions required to build a module might give one a headache. PowerShell doesn&amp;rsquo;t come with native way of building the module, which doesn&amp;rsquo;t make our job easier.
Hence, we&amp;rsquo;re going to use ModuleBuilder from PowerShell community so that the way we organise the code is predictable and used widely across other PowerShell projects.
In this video I&amp;rsquo;ll walk you through the process of preparing, organising and finally building the module.</description>
    </item>
    <item>
      <title>PowerShell Module and Manifest- create and configure your tools</title>
      <link>https://kamilpro.com/about-powershell/powershell-module-manifest/</link>
      <pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-module-manifest/</guid>
      <description>The more PowerShell code you write results in more and more scripts. Often you have multiple scripts managing one domain or application. What in situation when scripts start to use other scripts to work, creating so called dependency?
PowerShell module is the answer - it&amp;rsquo;s the native way of bundling in multiple functions together as a single file. And the best comes with Module&amp;rsquo;s Manifest, a file that describes things like version of your module, requirements for it to run, author&amp;rsquo;s details etc.</description>
    </item>
    <item>
      <title>PowerShell Parameter Attributes - validate, group, require params and add pipeline to your function</title>
      <link>https://kamilpro.com/about-powershell/powershell-parameter/</link>
      <pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-parameter/</guid>
      <description>Having properly configured parameters help your users to understand the use of your function. It also helps fellow developers to appreciate the intended use of the function. In addition, it gives you more control of how the code flows through your script.
Parameter attributes is what takes parameters to the next level - you can specify that certain parameters are mandatory, group them together so that only certain combination of parameters is meant to work together, we can even add pipeline support so that function can be used as any other built-in function.</description>
    </item>
    <item>
      <title>PowerShell function - converting script into function with parameters</title>
      <link>https://kamilpro.com/about-powershell/powershell-function/</link>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-function/</guid>
      <description>So you&amp;rsquo;ve been writing your scripts for some time and wondering how to make them more PowerShell-like, so that they can be invoked from the console like all the other cmdlets?
In this quick video I&amp;rsquo;ll show you how to convert a sample script into function, add parameters and indicated to your user how to use your function with mandatory parameters and types.
# Sample script which asks user for basic information, then manipulates it and # display some information # There&amp;#39;s no way (at least easy) to pass these parameters from prompt, nor validate $Name = Read-Host -Prompt &amp;#34;What&amp;#39;s your name?</description>
    </item>
    <item>
      <title>PowerShell PSCustomObject - Custom Object, the way it was meant to be</title>
      <link>https://kamilpro.com/about-powershell/powershell-pscustomobject/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-pscustomobject/</guid>
      <description>Everything is an object in PowerShell, and ability to create own object allows for one more way of controlling and handling data.
In this video I&amp;rsquo;ll take you through the steps of creating PSCustomObject, working with its properties to doing more advanced topics - like adding methods and types to the object.
&amp;lt;#PSScriptInfo .VERSION 1.0.0 .GUID f5228c81-d25c-4984-bb0c-e64576487b3e .AUTHOR Kamil Procyszyn .COPYRIGHT Kamil Procyszyn .PROJECTURI https://github.com/kprocyszyn/About-PowerShell .RELEASENOTES 2021 November .DESCRIPTION Link to the video: https://youtu.</description>
    </item>
    <item>
      <title>PowerShell Hash Table - Storing key value pairs</title>
      <link>https://kamilpro.com/about-powershell/powershell-hash-table/</link>
      <pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-hash-table/</guid>
      <description>Quick crash course into using hash tables in PowerShell.
&amp;lt;#PSScriptInfo .VERSION 1.0.0 .GUID 50fa84c4-080d-45cd-82a8-9e8dba10b187 .AUTHOR Kamil Procyszyn .COPYRIGHT Kamil Procyszyn .PROJECTURI https://github.com/kprocyszyn/About-PowerShell .RELEASENOTES 2021 September .DESCRIPTION Link to the video: https://youtu.be/oti2l8EmAT8 Documentation: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_hash_tables?view=powershell-7.1#:~:text=In%20PowerShell%2C%20each%20hash%20table%20is%20a%20Hashtable,to%20create%20an%20ordered%20dictionary%20%28System.Collections.Specialized.OrderedDictionary%29%20in%20PowerShell. #&amp;gt; &amp;lt;# About hashtable: A hash table, also known as a dictionary or associative array, is a compact data structure that stores one or more key/value pairs. For example, a hash table might contain a series of IP addresses and computer names, where the IP addresses are the keys and the computer names are the values, or vice versa.</description>
    </item>
    <item>
      <title>PowerShell Array and ArrayList - storing multiple items as a one variable</title>
      <link>https://kamilpro.com/about-powershell/powershell-array-and-arraylist/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-array-and-arraylist/</guid>
      <description>Array is a basic data structure that allows to store multiple items in one variable. In this short video, I&amp;rsquo;ll show you how to create a basic array, populate it with items, how to add, access and modify items within array.
In addition, I&amp;rsquo;ll present to you how to use ArrayList - which is much more flexible array, especially for adding more items.
# Link to the video: https://youtu.be/rvGd8kxXlVc # What is an array and why do I need it?</description>
    </item>
    <item>
      <title>PowerShell Switch Statement - Different take on branching</title>
      <link>https://kamilpro.com/about-powershell/powershell-switch-statement/</link>
      <pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-switch-statement/</guid>
      <description>One switch statement can replace multiple if/else statements, it makes code more readable and is really easy to use - there&amp;rsquo;s no reason why you shouldn&amp;rsquo;t give it a try!
# Link to the video: https://youtu.be/EqJ0lBO1rM4 # Documentation: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_switch?view=powershell-7.1 # Basic version &amp;lt;# switch ( test-value ) { condition {do-stuff} another condition {do-stuff} } #&amp;gt; # This will print out Green switch (2) { 0 { &amp;#34;Blue&amp;#34; } 1 { &amp;#34;Yellow&amp;#34;} 2 { &amp;#34;Green&amp;#34;} 3 { &amp;#34;Red&amp;#34;} } # Work with variable $number = 1 switch ($number) { 0 { &amp;#34;Blue&amp;#34; } 1 { &amp;#34;Yellow&amp;#34;} 2 { &amp;#34;Green&amp;#34;} 3 { &amp;#34;Red&amp;#34;} } # Assign variables within scriptblock $number = 3 switch ($number) { 0 { $result = &amp;#34;Blue&amp;#34; } 1 { $result = &amp;#34;Yellow&amp;#34;} 2 { $result = &amp;#34;Green&amp;#34;} 3 { $result = &amp;#34;Red&amp;#34;} } Write-Host &amp;#34;The result is: $result&amp;#34; -ForegroundColor $result # We can also assign statement to variable $number = 0 $result = switch ($number) { 0 { &amp;#34;Blue&amp;#34; } 1 { &amp;#34;Yellow&amp;#34;} 2 { &amp;#34;Green&amp;#34;} 3 { &amp;#34;Red&amp;#34;} } Write-Host &amp;#34;The result is: $result&amp;#34; -ForegroundColor $result # Use default in case there&amp;#39;s no match $number = 8 $result = switch ($number) { 0 { &amp;#34;Blue&amp;#34; } 1 { &amp;#34;Yellow&amp;#34;} 2 { &amp;#34;Green&amp;#34;} 3 { &amp;#34;Red&amp;#34;} default { Write-Warning &amp;#34;Unknown value, defaulting to White&amp;#34; &amp;#34;White&amp;#34; } } Write-Host &amp;#34;The result is: $result&amp;#34; -ForegroundColor $result # Strings can also be matched # This also shows working on expression switch ( (Get-Host).</description>
    </item>
    <item>
      <title>PowerShell For loop</title>
      <link>https://kamilpro.com/about-powershell/powershell-for-loop/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-for-loop/</guid>
      <description>For loop - do you actually need it, since there&amp;rsquo;s foreach loop? Turns out, yes - there are situations where for loop comes very handy.
In this video I&amp;rsquo;ll show you the basic syntax of the for loop, going through nested for loops to end up with real case scenario from Azure Application Insights.
# Link to the video: https://youtu.be/YQnBVn-9SN0 # Documentation: # https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_for?view=powershell-7.1 # Basic syntax: # for (Initial Value/statement; Condition; Repeat) { Run my code } # Initial value: Set this is up before starting the loop # Condition: For loops ends, when condition evaluates to false; or it keep running as lon as condition is true # Repeat: Do this after every loop for ($MyVariable = 0; $MyVariable -lt 10; $MyVariable = $MyVariable + 1) { &amp;#39;$MyVariable is {0}&amp;#39; -f $MyVariable Start-Sleep -Seconds 2 } for ($MyVariable = 0; $MyVariable -lt 99; $MyVariable++) { &amp;#39;$MyVariable is {0}&amp;#39; -f $MyVariable } # We can also decrease it for ($MyVariable = 10; $MyVariable -gt 5; $MyVariable = $MyVariable - 1) { &amp;#39;$MyVariable is {0}&amp;#39; -f $MyVariable } # or specify variable outside if $outside = 7 for (; $outside -lt 15; $outside++) { &amp;#39;$Outside is {0}&amp;#39; -f $outside } #Looping through array $pets = @(&amp;#34;Cat&amp;#34;, &amp;#34;Dog&amp;#34;, &amp;#34;Fish&amp;#34;, &amp;#34;Turtle&amp;#34;) $pets.</description>
    </item>
    <item>
      <title>PowerShell If statement - controlling the flow of your code</title>
      <link>https://kamilpro.com/about-powershell/powershell-if-statement/</link>
      <pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/about-powershell/powershell-if-statement/</guid>
      <description>In this video we are exploring how to use If statement in various scenarios. If statement allows you to take tide control over the execution of your code, by dictating your script what to do in a given situation.
# Link to the video: https://youtu.be/j8Ubwv8ApdU # Documentation: # Operators: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators?view=powershell-7.1 # About If: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_if?view=powershell-7.1 # Basic version # if something is true then do this if ($true) { &amp;#34;This is true&amp;#34; } if ($false) { &amp;#34;This is false&amp;#34; } # if something is true then do this, otherwise do that if ($true) { &amp;#34;This is true&amp;#34; } else { &amp;#34;This is false&amp;#34; } if ($false) { &amp;#34;This is true&amp;#34; } else { &amp;#34;This is false&amp;#34; } # let&amp;#39;s do some actual example if ( 5 -gt 3 ) { &amp;#34;This is more!</description>
    </item>
    <item>
      <title>PowerShell for IT Professionals</title>
      <link>https://kamilpro.com/powershell-course/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-course/</guid>
      <description>Hi and welcome in the PowerShell for IT Professional course!
The course is aimed at IT Professionals/system administrators that never coded before and manage Windows workloads.
To get started all you need is a Windows machine (I&amp;rsquo;d recommended server edition run as VM), in the course you can see me explaining and using commands, thus I strongly encourage you to follow along with me.
All the videos and related exercises are available for free and I am for each video to be 20-30 minutes long - thus you can easily find spare time to learn.</description>
    </item>
    <item>
      <title>Restarting VSS Writers with PowerShell script</title>
      <link>https://kamilpro.com/restarting-vss-writers-with-powershell-script/</link>
      <pubDate>Sun, 01 Dec 2019 18:27:18 +0000</pubDate>
      <guid>https://kamilpro.com/restarting-vss-writers-with-powershell-script/</guid>
      <description>VSS Writers are responsible for backups – if they stop working, then backups might fail. The solution to that is restarting VSS Writers, but the problem here is that there are many, and at least out of the box, there’s no mechanism to make this automatic… but there’s PowerShell.
I’m not interested in your code, I just want to restart these VSS Writers In that case, head on to: mygithub, use the code and run:</description>
    </item>
    <item>
      <title>Resolve IP and DNS with Powershell tool</title>
      <link>https://kamilpro.com/powershell-tool-resolve-ip-and-dns/</link>
      <pubDate>Sun, 29 Apr 2018 21:40:00 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-tool-resolve-ip-and-dns/</guid>
      <description>I’ve been asked to prepare a simple tool which would:
Resolve IP address or DNS Return all results to table Import addresses from a file The reason behind was to check how IP/DNS records change over the period of time, therefore there was a need for something like that:
A file with all addresses in question Tool which could import all these addresses and resolve them Save the results into a new file Once having at least a couple of files, the results could be compared.</description>
    </item>
    <item>
      <title>Powershell – resolve full names to usernames from CSV file</title>
      <link>https://kamilpro.com/powershell-resolve-full-names-usernames-csv-file/</link>
      <pubDate>Sat, 21 Oct 2017 14:03:58 +0000</pubDate>
      <guid>https://kamilpro.com/powershell-resolve-full-names-usernames-csv-file/</guid>
      <description>It’s unbelievable how long it took me to figure out this simple Powershell script, but yet it does the trick :).
Often you receive a request to do a certain action with a bunch of accounts, and (obviously) the list provided contains the full names rather usernames. Pain to do it manually, but yet we can utilise Powershell here.
What you need: CSV file, with only one column, and the header of the column must be called “Name”, if you prefer to use something different, simply amend Name in line 6 to reflect your header.</description>
    </item>
  </channel>
</rss>
